<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[android绘制系统和性能优化]]></title>
    <url>%2F2018%2F01%2F26%2Fandroidwindowsystem%2F</url>
    <content type="text"><![CDATA[1111]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[编码格式和string编码]]></title>
    <url>%2F2018%2F01%2F15%2F%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%92%8Cstring%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[目前很多流行的语言，如C#、Java内部采用的都是 Unicode 16（UCS2）编码，在这种编码中所有的字符都是两个字节。 unicode是一种“编码”，所谓编码就是一个编号(数字)到字符的一种映射关系，就仅仅是一种一对一的映射而已，可以理解成一个很大的对应表格GBK、UTF-8是一种“编码格式”，是用来序列化或存储1中提到的那个“编号(数字)”的一种“格式”；GBK和UTF-8都是用来序列化或存储unicode编码的数据的，但是分别是2种不同的格式； 他们俩除了格式不一样之外，他们所关心的unicode编码范围也不一样，utf-8考虑了很多种不同国家的字符，涵盖整个unicode码表，所以其存储一个字符的编码的时候，使用的字节长度也从1字节到4字节不等；而GBK只考虑中文——在unicode中的一小部分——的字符，的编码，所以它算好了只要2个字节就能涵盖到绝大多数常用中文(2个字节能表示6w多种字符),所以它存储一个字符的时候，所用的字节长度是固定的；上述2个概念不懂的请马上google，下面不再赘述；我下面说说这个问题本身…的问题在哪里首先java的string使用的编码是unicode，但是，当string存在于内存中时(也就是当程序运行时、你在代码中用string类型的引用对它进行操作时、也就是string没有被存在文件中且也没有在网络中传输(序列化)时)，是“只有编码而没有编码格式的”，所以java程序中的任何String对象，说它是gbk还是utf-8都是错的，gbk和utf-8是编码格式而不是编码，String在内存中不需要“编码格式”(记住编码格式是在存文件或序列化的时候使用的), 它只是一个unicode的字符串而已 Web应用程序在浏览器中显示字符串时，由于显示长度的限制，常常需要将字符串截取后再进行显示。但目前很多流行的语言，如C#、Java内部采用的都是 Unicode 16（UCS2）编码，在这种编码中所有的字符都是两个字符，因此，如果要截取的字符串是中、英文、数字混合的，就会产生问题，如下面的字符串： String s = &quot;a加b等于c，如果a等1、b等于2，那么c等3&quot;; 上面的字符串既有汉字，又有英文字符和数字。如果要截取前6个字节的字符，应该是”a加b等”，但如果用substring方法截取前6个字符就成了”a 加b等于c”。产生这个问题的原因是将substring方法将双字节的汉字当成一个字节的字符（UCS2字符）处理了。 要解决这个问题的方法是首先得到该字符串的UCS2编码的字节数组，如下面的代码如下： byte[] bytes = s.getBytes(&quot;Unicode&quot;); 由于上面生成的字节数组中前两个字节是标志位，bytes[0] = -2，bytes[1] = -1，因此，要从第三个字节开始扫描，对于一个英文或数字字符，UCS2编码的第二个字节是相应的ASCII，第一个字节是0，如a的UCS2编码是0 97，而汉字两个字节都不为0，因此，可以利于UCS2编码的这个规则来计算实际的字节数，该方法的实现代码如下： public static String bSubstring(String s, int length) throws Exception { byte[] bytes = s.getBytes(&quot;Unicode&quot;); int n = 0; // 表示当前的字节数 int i = 2; // 要截取的字节数，从第3个字节开始 for (; i &lt; bytes.length &amp;&amp; n &lt; length; i++) { // 奇数位置，如3、5、7等，为UCS2编码中两个字节的第二个字节 if (i % 2 == 1) { n++; // 在UCS2第二个字节时n加1 } else { // 当UCS2编码的第一个字节不等于0时，该UCS2字符为汉字，一个汉字算两个字节 if (bytes[i] != 0) { n++; } } } // 如果i为奇数时，处理成偶数 if (i % 2 == 1) { // 该UCS2字符是汉字时，去掉这个截一半的汉字 if (bytes[i - 1] != 0) i = i - 1; // 该UCS2字符是字母或数字，则保留该字符 else i = i + 1; } return new String(bytes, 0, i, &quot;Unicode&quot;); } 下面代码使用了bSubstring方法： String s = &quot;a加b等于c，如果a等1、b等于2，那么c等3&quot;; System.out.println(bSubstring(s, 6)); 上面的代码截取的字符串是&quot;a加b等&quot;。 ===== 所以java里面String是不带编码格式的，而String.toByteArray(charsetName)得到的byteArray是带编码格式的，格式就是你传入的’charsetName’,我们不妨把toByteArray的这个过程叫做“编码”;另外，new String(byte[], charsetName)是把一个byte数组(带编码格式)以charsetName指定的编码格式翻译为一个不带编码格式的String对象，我们不妨把这个过程叫“解码”]]></content>
      <categories>
        <category>计算机常识</category>
      </categories>
      <tags>
        <tag>计算机常识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[思维导图的使用心得]]></title>
    <url>%2F2017%2F12%2F21%2Fswdtstudy%2F</url>
    <content type="text"><![CDATA[思维导图的使用心得&emsp;&emsp;思维导图用了一段时间了。我自己的理解是思维导图可以分两类，一类主要是梳理的作用，一类主要是发散的作用，不同的导图功能不同。思维导图更多的应该用图，在枝节上也应该是图，或者是用关键字，因为文字需要一定的脑力去读去理解，而且容易不形象，不能有效理解。 &emsp;&emsp;1. 作为梳理知识点知识图谱型的导图，它能够起到一个是对知识结构的梳理，发现遗漏的关键知识点，聚集在一起知识密度大复习效率也更高。 &emsp;&emsp;2. 作为发散型的导图，它主要是头脑风暴似的让你的大脑展开联想，联结，从而发现good idea，产生对事物有更有内涵的认识。 ##官方的定义 思维导图又叫心智图，是表达发射性思维的有效的图形思维工具 ，它简单却又极其有效，是一种革命性的思维工具。思维导图运用图文并重的技巧，把各级主题的关系用相互隶属与相关的层级图表现出来（我看到这里的时候已经看不下去了），把主题关键词与图像、颜色等建立记忆链接。思维导图充分运用左右脑的机能，利用记忆、阅读、思维的规律，协助人们在科学与艺术、逻辑与想象之间平衡发展，从而开启人类大脑的无限潜能。思维导图因此具有人类思维的强大功能。 ##优秀的思维导图 高中的时候最讨厌历史了，因为很讨厌背那些东西。后来看了《学习的革命》，就将历史课本、政治课本、地理课本，每一章都画成思维导图。文字简洁，系统清晰，还喜欢自己加些卡通画。这样平时没事拿出来看看，有天朋友来问题目，突然发现自己几乎可以把整本书的内容都背下来了，甚至可以说出哪个知识点在哪一页。后来我整理的这些东西还被老师拿去各个班分享去了……历史从此从C一跃而成A啊。现在想来，效果如此明显估计是因为：（1）历史政治的高中内容特别适合这种一层一层的表现形式，画成思维导图的模样后层次非常清晰；（理清层次，结构）（2）把每个点要记住的内容一层层分解下去，因此看起来要背诵的内容少了很多（分解后容易记忆），想象那些线是自己的神经末梢，每一根神经末梢用来记一个知识点，真是绰绰有余了，这么想着，心理上就轻松了许多；（3）我是图形记忆胜过文字记忆的人，自己平时也喜欢画画，于是就把能转换成图形的东西画成简笔画的形式，例如政治上说过财政，就画个钱袋子，历史上说到打仗，就画小人拿着枪什么的，以后每次一想到知识点就想到画，接着就想到画边上的字了。（尽量让知识点的记忆变成图像记忆，用形象的图像来表示） 总的来说，就是画思维导图的时候要 1. 分清知识点层次结构，不能随意新开枝节，知道为什么要放到这个枝节之下和不放在其他枝节点的原因。2. 分解要足够细致，就会了解到更加具体，更容易记忆。 3. 尽量多用形象贴切的图像表示，图像的理解比对文字的理解更加深，更快，更不容易忘记。 ##三大思维导图软件比较使用软件画思维导图可以云同步比较方便，主流是用以下三种，另外自己在用的幕布软件也不错。]]></content>
      <categories>
        <category>工作效率</category>
      </categories>
      <tags>
        <tag>工作效率</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用GTD提高工作效率]]></title>
    <url>%2F2017%2F12%2F14%2FaboutGTD%2F</url>
    <content type="text"><![CDATA[如何使用GTD提高工作效率&emsp;&emsp;知识分为两类：一类是专业知识，另一类是认知知识。两者的关系像没有“鱼”和“渔”的关系。认知知识会指导我们的大脑怎么去获取知识。而GTD就是一类教你如何高效做好事情的方法。 &emsp;&emsp;要了解GTD为何有效，就要了解我们的大脑工作过程。 高中时候，我哥看到我天天坐在屋子里学习，就经常给我讲 “刻苦”和“努力”的区别。刻苦，需要“吃苦”了，不是个享受的过程，不要做。“努力”则是有方法有张有弛地做事情。那时候，我不肯听他的，想跟他PK进北大，还是天天在屋子里学习。于是，我就没有进北大。 跌跌撞撞地走了近10年，进了宾大，才理解，什么是努力。 朋友K，本科各种名校交换经历。看到她的时候，好像都在玩。什么好玩玩什么。不过，上课的时候，你会注意到她听课，“皱眉” 【思考】，然后，在听到其他人的各种观点之后，提出更深的问题。下课之后，若是遇到我，便说：“hey，让我们把上课讲的东西结构串一遍。这样，我们就一辈子都记住了。” 串一遍之后，她就跑去玩了。 看她25岁，就直接申博成功，跨了无数学科【商科，传播，科技，社会，心理。。。】，大家都说她聪明。而有一天，我看到她笔记本上的一个思维导图： 2015-2016,三块技能：设计+心理+商科。然后，在每个技能区块下面记下来学校里可以选的课和Cousera上可以上的课。 我问她，一直都是这样计划吗？她说，嗯，我每五年都有一个大的计划和目标。 这个她，上课，约朋友总是迟到。为什么？她一开始做事情，就忘了周围：全神贯注。玩和工作，都是。 我问录取她的博士导师，她能PK掉哈佛选手的原因，她的导师说：she is a deep thinker.【她是深度思考者】我点头称是。 所以，努力不是刻苦，不是一天到晚坐在桌子面前，发呆或者死记硬背。而是，思考、注重方法。然后执行。 &emsp;&emsp;善于利用思维时间的人，可以无形中比别人多出很多时间，从而实际意义上能比别人多活很多年。我们经常听说“心理年龄”这个词，思考得多的人，往往心理年龄更大。有人用10年才能领悟一个道理，因为他们是被动领悟 — 只有当现实重重撞到脸上的时候才感到疼，疼完了之后还是不记得时时提醒自己，结果很快时过境迁抛之脑后，等到第二次遇到同一个坑的时候早忘了曾经跌过跟头了，像这样的学习效率，除非天天摔坑，否则遗忘的效率总是大过吃亏长的记性。善于利用思维时间的人则能够在重要的事情上时时主动提醒自己，将临时的记忆变成硬编码的行为习惯。 &emsp;&emsp;如何有效的利用我们的思维时间，如何排除干扰，就是我们使用GTD的原因。 &emsp;&emsp;广义的GTD包含了aim，Deconstruct the skill解构技能，Focus, Understand, Learn Enough to self-correct学到足以练习，practice，形成context上下文，deliberate practice不要重复学习这些步骤，通常我们我们主要专注于aim和focus，practice，在学习和完成一些复杂的事情时，就需要解构技能，而self-correct，context，deliberate practice是指导性思想。 &emsp;&emsp;aim，首先要知道你要做什么，为什么要做，如果你的行动力不强说明你的目标有问题，不是你真正想做的事情，或者你还没有想好为什么要做它，你必须要有迫切完成它的愿望。你有没有想象10年后你自己的样子，你想要有什么样的改变，你想要战胜生活中的哪些困难，把它列出来，然后问如果要达到这些目标要先实现什么，再实现什么，把事情解构成你目前就能做的事情的水平，你要花上足够的时间，比如5个小时以上，把事情分解到你觉得每一步都是不难的一个小时的水平，现在你就可以实行，然后写入你的当日事情中去。然后在日常中，你可以采用4象限方法，找出今天要做的重要紧急的事情，重要的是在质，不在量，花更多的时间把事情做的专业，比囫囵吞枣好。 &emsp;&emsp;focus，科学家做过一个实验，一个人当他的手机放在视线的范围内，他的紧张水平就会开始提高，智商就会下降15%左右，现代社会，各大公司在服务大家的同时，也在抢占着大家的时间，甚至抢占了大家安静思考和体会生活的时间，所以首先我们要练习抗干扰能力。不仅要练习抗干扰，同时也要移除干扰，把手机设置勿扰模式，把桌面清理干净。有一些软件也可以帮助我们专注，如Todolist类型的Any.do，TickTick，things3，还有番茄工作法：每一个番茄钟大约30分钟，集中注意力完成一件事，相应的软件有 Focus Booster，番茄计时器chrome插件，番茄土豆的网页，还有四象限法则，根据事情的重要和紧急程度把事情进行划分，只做重要的事情不做不重要但紧急的事情，相应的软件有高效TODO网页和客户端版，但是工具是双刃剑，最关键的是要根据自身情况，懂得平衡利弊。像我自己觉得单单用纸和笔也不错。 &emsp;&emsp;学会休息，会工作的人都是会休息的人，我们以为GTD是教我们如何做更多的事情，其实GTD是让我们合理安排时间，空出时间来休息。事情是做不完的，欲望是无限的，而人的精力是有限的，这就要求我们只做最重要的事情，然后给自己充足的时间休息。睡觉和休息的时候，大脑会对你学到的知识进行整理，联结，这就是为什么有时经过休息，你感觉你的理解更深了一步。 &emsp;&emsp;解构技能，客观的估计事情的难度和需要花的时间。很多时候我们不是败于一件事情的难度，而是败给了我们自己的情绪，事前过于乐观导致我们很容易被挫败。如何理性的评估自己的能力和潜力，以及遇到变化该如何应对是制定工作计划中很重要的一步。解构技能就是把难以把握的事情拆分成自己能够上手的简单事情，然后像拼图一样，一块一块拼上去，最后凑成一张完整的图。重点是，每一块都要分解到让你觉得可以在45分钟内完成并且也乐于去完成。然后一旦遇到情况有变，及时更正需要改变的部分，再次进行拆分，这样就可以避免因为变化而导致无法继续的情况。 &emsp;&emsp;Learn Enough to self-correct如果你要学习画画，不要说给自己买5本书，看完之后就开始画，而是要当你学到足以练习并能纠错的时候就可以了，因为你在画的过程中有问题就会去主动去找解决方法了。主动尝试大于被动学习。 &emsp;&emsp;deliberate practice对于我们已经掌握的东西，没必要一直重复学习了，你更应该多花时间和精力在你感觉最难的部分，你对一个事情了解的越深入，你就能够做的更好。 一下培养过多的习惯，失败率接近100%。最后借一句网络上的话，“懂得很多道理，却仍然过不好这一生”，先从简单的事情开始做，坚持100天。]]></content>
      <categories>
        <category>工作效率</category>
      </categories>
      <tags>
        <tag>工作效率</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java思维导图]]></title>
    <url>%2F2017%2F12%2F10%2Fjavaswdt%2F</url>
    <content type="text"><![CDATA[html版]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
